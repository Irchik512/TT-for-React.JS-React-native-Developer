{"version":3,"file":"static/js/225.dd4cfbd9.chunk.js","mappings":"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","sources":["components/AddForm/AddForm.styled.jsx","components/Notification/Notification.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","helpers/random.js","redux/selectors.js","components/ListItems/DictionaryItem.jsx","components/List/List.styled.jsx","components/List/List.jsx","views/Dictionary/DictionaryView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 350px;\n  border: 2px solid gray;\n  margin 0 auto;\n  padding: 15px;\n`;\n\nexport const Label = styled.label`\n  width: 100%;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\n  box-sizing: border-box;\n  width: 100%;\n  height: 30px;\n  max-width: 350px;\n  margin: 0 auto;\n`;\n\nexport const Button = styled.button`\n  font-family: inherit;\n  display: block;\n  border: none;\n  cursor: pointer;\n  padding: 5px;\n  margin: ${props => (props.type === 'submit' ? '0 auto' : '0')};\n  max-width: 100%;\n  overflow: hidden;\n  width: fit-content;\n   {\n    background-color: ${props =>\n      props.type === 'submit' ? '#ff8100ba' : '#009688'};\n  }\n`;\n","\nexport default function Notification({ children }) {\n  return <p>{children}</p>;\n}\n\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  width: 100%;\n  font-family: sans-serif;\n`;\nexport const Container = styled.div`\n  box-sizing: border-box;\n  padding: 0 20px;\n  width: 100%;\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n  font-size: 35px;\n`;\n","import { Section, Title, Container } from 'components/Section/Section.styled';\n\nexport default function Sections({ title, children }) {\n  return (\n    <Section>\n      <Container>\n        {title && <Title>{title}</Title>}\n        {children}\n      </Container>\n    </Section>\n  );\n}\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","export const chooseRandomWords = (dictionary, numWords) => {\n  return Object.values(dictionary).reduce((selectedWords, word) => {\n      // Generate a random number between 0 and the number of words we've selected so far\n      const randomIndex = Math.floor(Math.random() * (selectedWords.length + 1));\n  \n      // If we haven't selected enough words yet, or if this word should be selected\n      if (selectedWords.length < numWords || randomIndex < numWords) {\n        // Insert this word at the randomly selected index\n        selectedWords.splice(randomIndex, 0, word);\n        // If we have too many words selected, remove the last one\n        if (selectedWords.length > numWords) {\n          selectedWords.pop();\n        }\n      }\n      return selectedWords;\n    }, []);\n  };\n  ","import { createSelector } from '@reduxjs/toolkit';\nimport {chooseRandomWords} from \"helpers/random\"\n\nexport const selectDictionary = state => state.dictinary;\nexport const selectCurrentTest = state => state.currentTest;\nexport const selectCurrentQuestion = state => state.currentQuestion;\nexport const selectCurrentScore = state => state.currentScore;\nexport const selectTestHistory = state => state.testHistory;\n\nexport const selectRandomWords = createSelector(\n  [selectDictionary],\n  (dictinary,) => {\n    const WORDSLENGTH = 10;\n    const randomList =  chooseRandomWords(dictinary, WORDSLENGTH);\n    const randomLearnList =  randomList.map((obj)=>{\n    const answers = chooseRandomWords(randomList, 3).map((item)=> {\n      const answersVariant = {    \n        [item.translation]: false\n      }\n      return answersVariant\n    });\n    answers.push({[obj.translation]: true});\n    const newObj = {...obj, answers, };\n  return newObj\n})\n   return randomLearnList\n  }\n);\n","import { Button } from 'components/AddForm/AddForm.styled';\n// import { useDispatch } from 'react-redux';\n\nexport default function DictionaryItem({wordToLearn, translation}) {\n//   const dispatch = useDispatch();\n  return (\n    <div>\n        <p>\n          {wordToLearn}\n        </p>\n        <p>\n          {translation}\n        </p>\n      <Button type=\"button\" >\n        Delete\n      </Button>\n  \n    </div>\n  );\n}\n\n\n","import styled from 'styled-components';\nexport const WordsList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 15px 0;\n  width: 100%;\n  font-family: sans-serif;\n  display: flex;\n  flex-wrap: wrap;\n  align-content: center;\n  flex-direction: column;\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 40px) / 2);\n    justify-content: space-around;\n    flex-direction: row;\n  } ;\n`;\nexport const Word = styled.li`\n  box-sizing: border-box;\n  width: 360px;\n  text-align: start;\n  border-radius: 4px;\n  box-shadow: 0px 0px 1px 1px rgb(0 0 0 / 15%);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  >p { margin: 0;}\n \n  @media screen and (max-width: 424px) {\n    flex-direction: column;\n    width: 280px;\n  };\n\n  @media screen and (min-width: 1024px) {\n    width: 380px;\n  };\n`;","import DictionaryItem from 'components/ListItems/DictionaryItem';\nimport { useSelector } from 'react-redux';\nimport { WordsList, Word } from './List.styled'\nimport { selectDictionary } from 'redux/selectors';\n\nexport default function List() {\n  const dictionaryList = useSelector(selectDictionary);\n  return (\n    <WordsList>\n     {dictionaryList.map(word => (\n      <Word key={word.id} >\n        <DictionaryItem wordToLearn= {word.wordToLearn} translation = {word.translation} />\n      </Word>\n      ))}\n    </WordsList>\n  );\n};\n","import Section from 'components/Section/Section';\nimport List from 'components/List/List';\nimport Notification from 'components/Notification/Notification';\n\nexport default function DictionaryView() {\n\n  return (\n    <>\n      <Section title = 'Dictionary'>\n          <Notification>There is no word to lern yet.</Notification>\n            <List />\n      </Section>\n    </>\n  );\n}\n"],"names":["Form","styled","Label","Input","Button","props","type","Notification","children","Section","Container","Title","Sections","title","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","chooseRandomWords","dictionary","numWords","values","reduce","selectedWords","word","randomIndex","Math","floor","random","selectDictionary","state","dictinary","selectRandomWords","randomList","obj","answers","item","translation","DictionaryItem","wordToLearn","WordsList","Word","List","dictionaryList","useSelector","id","DictionaryView"],"sourceRoot":""}