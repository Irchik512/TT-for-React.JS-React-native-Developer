{"version":3,"file":"static/js/182.f1b5f82a.chunk.js","mappings":"2SAEaA,EAAOC,EAAAA,GAAAA,KAAH,yJASJC,EAAQD,EAAAA,GAAAA,MAAH,gEAKLE,EAAQF,EAAAA,GAAAA,MAAH,4HAQLG,EAASH,EAAAA,GAAAA,OAAH,iPAMP,SAAAI,GAAK,MAAoB,WAAfA,EAAMC,KAAoB,SAAW,GAA1C,IAKO,SAAAD,GAAK,MACR,WAAfA,EAAMC,KAAoB,YAAc,SADjB,G,kFCjChBC,EAAUN,EAAAA,GAAAA,QAAH,oEAIPO,EAAYP,EAAAA,GAAAA,IAAH,8GAOTQ,EAAQR,EAAAA,GAAAA,GAAH,4C,SCXH,SAASS,EAAT,GAAwC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxC,OACE,SAACL,EAAD,WACE,UAACC,EAAD,WACGG,IAAS,SAACF,EAAD,UAAQE,IACjBC,MAIR,C,6HCJc,SAASC,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,cAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,UACHR,EAAWS,GACX,MACF,IAAK,cACHP,EAAeO,GACf,MACF,QACE,OAEL,EAeD,OACE,UAAC,KAAD,CAAMC,SAfa,SAAAJ,GACnBA,EAAEK,iBACF,IAAMC,ECVG,eAACC,EAAD,uDAAQ,GAAR,OACXC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbQ,CDUMG,GACTC,EAAgB,CACpBL,GAAIN,EACJY,YAAazB,EACbE,YAAAA,GAEFE,GAASsB,EAAAA,EAAAA,IAAgBF,IACzBG,QAAQC,IAAIJ,GACZvB,EAAW,IACXE,EAAe,GAChB,EAGC,WACE,UAAC,KAAD,sBAEE,SAAC,KAAD,CACEZ,KAAK,OACLkB,KAAK,UACLC,MAAOV,EACP6B,QAAQ,yHACRjC,MAAM,mCACNkC,SAAUxB,EACVyB,UAAQ,QAGZ,UAAC,KAAD,0BAEE,SAAC,KAAD,CACExC,KAAK,OACLkB,KAAK,cACLC,MAAOR,EACP2B,QAAQ,yHACRjC,MAAM,mCACNoC,QAAS1B,EACTyB,UAAQ,QAGZ,SAAC,KAAD,CAAQxC,KAAK,SAAb,wBAGL,C,aEnEc,SAAS0C,IACtB,OACE,UAACzC,EAAA,EAAD,YACE,0CACA,SAAC,EAAD,MAGL,C","sources":["components/AddForm/AddForm.styled.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/AddForm/AddForm.jsx","../node_modules/nanoid/index.browser.js","views/AddWord/AddWordView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 350px;\n  border: 2px solid gray;\n  margin 0 auto;\n  padding: 15px;\n`;\n\nexport const Label = styled.label`\n  width: 100%;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\n  box-sizing: border-box;\n  width: 100%;\n  height: 30px;\n  max-width: 350px;\n  margin: 0 auto;\n`;\n\nexport const Button = styled.button`\n  font-family: inherit;\n  display: block;\n  border: none;\n  cursor: pointer;\n  padding: 5px;\n  margin: ${props => (props.type === 'submit' ? '0 auto' : '0')};\n  max-width: 100%;\n  overflow: hidden;\n  width: fit-content;\n   {\n    background-color: ${props =>\n      props.type === 'submit' ? '#ff8100ba' : '#009688'};\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  width: 100%;\n  font-family: sans-serif;\n`;\nexport const Container = styled.div`\n  box-sizing: border-box;\n  padding: 0 20px;\n  width: 100%;\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n  font-size: 35px;\n`;\n","import { Section, Title, Container } from 'components/Section/Section.styled';\n\nexport default function Sections({ title, children }) {\n  return (\n    <Section>\n      <Container>\n        {title && <Title>{title}</Title>}\n        {children}\n      </Container>\n    </Section>\n  );\n}\n","import { useState, } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addToDictionary } from 'redux/dictionarySlice.js';\nimport { Form, Label, Input, Button } from './AddForm.styled';\nimport { nanoid } from 'nanoid';\n// import { selectDictionary } from 'redux/selectors';\n\nexport default function AddtForm() {\n  const [newWord, setNewWord] = useState('');\n  const [translation, setTranslation] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'newWord':\n        setNewWord(value);\n        break;\n      case 'translation':\n        setTranslation(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const unikId = nanoid()\n    const newWordObject = { \n      id: unikId,\n      wordToLearn: newWord,\n      translation,\n     };\n    dispatch(addToDictionary(newWordObject));\n    console.log(newWordObject);\n    setNewWord('');\n    setTranslation('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        newWord\n        <Input\n          type=\"text\"\n          name=\"newWord\"\n          value={newWord}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"newWord may contain only letters\"\n          onChange={handleChange}\n          required\n        />\n      </Label>\n      <Label>\n        translation\n        <Input\n          type=\"text\"\n          name=\"translation\"\n          value={translation}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Translation contain only letters\"\n          onInput={handleChange}\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add word</Button>\n    </Form>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import AddForm  from 'components/AddForm/AddForm'\nimport Sections  from 'components/Section/Section'\n\nexport default function AddWordView() {\n  return(\n    <Sections> \n      <h2>Add new word</h2>\n      <AddForm />\n    </Sections>\n  );\n};"],"names":["Form","styled","Label","Input","Button","props","type","Section","Container","Title","Sections","title","children","AddtForm","useState","newWord","setNewWord","translation","setTranslation","dispatch","useDispatch","handleChange","e","currentTarget","name","value","onSubmit","preventDefault","unikId","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","newWordObject","wordToLearn","addToDictionary","console","log","pattern","onChange","required","onInput","AddWordView"],"sourceRoot":""}